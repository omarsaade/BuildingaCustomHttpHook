{"ast":null,"code":"// import React, { useEffect, useState } from 'react'\n// function useFetch(method) {\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState(null);\n//     const [tasks, setTasks] = useState([]);\n//     const f = async (taskText, props) => {\n//         setIsLoading(true);\n//         setError(null);\n//         try {\n//             if (method === \"GET\") {\n//                 console.log(\"get\");\n//                 const response = await fetch('https://react-http-38b54-default-rtdb.firebaseio.com/tasks.json');\n//                 if (!response.ok) {\n//                     throw new Error('Request failed!');\n//                 }\n//                 const data = await response.json();\n//                 const loadedTasks = [];\n//                 for (const taskKey in data) {\n//                     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//                 }\n//                 setTasks(loadedTasks);\n//             } else {\n//                 console.log(\"post\");\n//                 const response = await fetch(\n//                     'https://react-http-38b54-default-rtdb.firebaseio.com/tasks.json',\n//                     {\n//                         method: 'POST',\n//                         body: JSON.stringify({ text: taskText }),\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                     }\n//                 );\n//                 if (!response.ok) {\n//                     throw new Error('Request failed!');\n//                 }\n//                 const data = await response.json();\n//                 //\n//                 const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n//                 const createdTask = { id: generatedId, text: taskText };\n//                 // props.onAddTask(createdTask);\n//             }\n//         } catch (err) {\n//             console.log(err);\n//             setError(err.message || 'Something went wrong!');\n//         }\n//         setIsLoading(false);\n//     };\n//     // console.log(createdTask);\n//     const taskAddHandler = (createdTask) => {\n//         setTasks((prevTasks) => prevTasks.concat(createdTask));\n//     };\n//     return [tasks, isLoading, error, f, setTasks, taskAddHandler];\n// }\n// export default useFetch\n// //post or get","map":{"version":3,"names":[],"sources":["C:/Users/omar/Documents/BuildingaCustomHttpHook/BuildingaCustomHttpHook/buildingcustomhttphook/src/components/hooks/useFetch.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\r\n\r\n// function useFetch(method) {\r\n\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const [error, setError] = useState(null);\r\n//     const [tasks, setTasks] = useState([]);\r\n\r\n\r\n\r\n//     const f = async (taskText, props) => {\r\n//         setIsLoading(true);\r\n//         setError(null);\r\n//         try {\r\n\r\n//             if (method === \"GET\") {\r\n//                 console.log(\"get\");\r\n//                 const response = await fetch('https://react-http-38b54-default-rtdb.firebaseio.com/tasks.json');\r\n//                 if (!response.ok) {\r\n//                     throw new Error('Request failed!');\r\n//                 }\r\n//                 const data = await response.json();\r\n//                 const loadedTasks = [];\r\n\r\n//                 for (const taskKey in data) {\r\n//                     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n//                 }\r\n//                 setTasks(loadedTasks);\r\n\r\n//             } else {\r\n//                 console.log(\"post\");\r\n//                 const response = await fetch(\r\n//                     'https://react-http-38b54-default-rtdb.firebaseio.com/tasks.json',\r\n//                     {\r\n//                         method: 'POST',\r\n//                         body: JSON.stringify({ text: taskText }),\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                     }\r\n//                 );\r\n\r\n//                 if (!response.ok) {\r\n//                     throw new Error('Request failed!');\r\n//                 }\r\n\r\n//                 const data = await response.json();\r\n//                 //\r\n//                 const generatedId = data.name; // firebase-specific => \"name\" contains generated id\r\n\r\n//                 const createdTask = { id: generatedId, text: taskText };\r\n\r\n//                 // props.onAddTask(createdTask);\r\n\r\n//             }\r\n\r\n\r\n//         } catch (err) {\r\n//             console.log(err);\r\n//             setError(err.message || 'Something went wrong!');\r\n//         }\r\n//         setIsLoading(false);\r\n//     };\r\n\r\n\r\n//     // console.log(createdTask);\r\n//     const taskAddHandler = (createdTask) => {\r\n//         setTasks((prevTasks) => prevTasks.concat(createdTask));\r\n//     };\r\n\r\n//     return [tasks, isLoading, error, f, setTasks, taskAddHandler];\r\n// }\r\n\r\n// export default useFetch\r\n\r\n// //post or get"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA"},"metadata":{},"sourceType":"module"}